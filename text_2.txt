ÂČĘÎĐČŃŇŔÍÍß ŔËĂÎĐČŇĚ˛Â Ó Á˛ÁË˛ÎŇĹĘŔŐ ĚÎÂ ĎĐÎĂĐŔĚÓÂŔÍÍß
Ŕâňîđč ďóáëięŕöłż: Ęîâŕëĺíęî Î.Î., Ęîđ˙ăłíŕ Ä.Î. Âłííčöüęčé íŕöłîíŕëüíčé ňĺőíł÷íčé óíłâĺđńčňĺň
Ŕíîňŕöł˙: Ó äŕííłé ńňŕňňł áóëî đîçăë˙íóňî âčęîđčńňŕíí˙ ŕëăîđčňěłâ ó áłáëłîňĺęŕő ěîâ ďđîăđŕěóâŕíí˙. Ęëţ÷îâł ńëîâŕ: ŕëăîđčňěč, ńîđňóâŕíí˙, ëłíłéíčé ďîřóę, äâłéęîâčé ďîřóę, ďîřóę ńňđčáęŕěč, łíňĺđďîë˙öłéíčé ďîřóę, ĺęńďîíĺíöłŕëüíčé ďîřóę, ćŕäłáíčé ŕëăîđčňě.
Ńňŕňň˙
Çŕ âńţ łńňîđłţ ęîěď'ţňĺđíčő íŕóę ńęëŕëîń˙ đîçóěłíí˙, ˙ęł ŕëăîđčňěč ňŕ ńňđóęňóđč äŕíčő (ńďîńîáč żő çáĺđłăŕíí˙) ďîňđłáíł äë˙ âčđłřĺíí˙ ďđŕęňč÷íčő çŕâäŕíü, ďĺâíčé íŕáłđ, ˙ęčé ďîâčíĺí çíŕňč ęîćĺí đîçđîáíčę. Íŕďđčęëŕä, ńîđňóâŕíí˙: ňîâŕđč â ěŕăŕçčíł ńîđňóţňü çŕ âŕđňłńňţ ŕáî ňĺđěłíó ďđčäŕňíîńňł, ŕ đĺńňîđŕíč – çŕ âłääŕëĺíłńňţ ŕáî đĺéňčíăó. Őĺř-ňŕáëčöł äîďîěŕăŕţňü ďĺđĺâłđčňč ęîđĺęňíłńňü ďŕđîë˙ ňŕ íĺ çáĺđłăŕňč éîăî íŕ ńŕéňł ó âłäęđčňîěó âčăë˙äł, ăđŕôč – çíŕőîäčňč íŕéęîđîňřčé řë˙ő ł çáĺđłăŕňč çâ'˙çęč ěłć ęîđčńňóâŕ÷ŕěč â ńîöěĺđĺćŕő.
Ŕëăîđčňěč – öĺ ďîńëłäîâíłńňü ňî÷íî âčçíŕ÷ĺíčő äłé, ˙ęł ďđčçâîä˙ňü äî âčđłřĺíí˙ ďîńňŕâëĺíîż çŕäŕ÷ł ÷č ďĺâíîăî çŕâäŕíí˙ ł íŕ ńüîăîäíł óćĺ ńňâîđĺíî âĺëč÷ĺçíó ęłëüęłńňü ŕëăîđčňěłâ äë˙ âčđłřĺíí˙ âŕćęčő çŕäŕ÷, ůî ďîëĺăřóţňü íŕďčńŕíí˙ ęîäó áóäü-˙ęîěó ďđîăđŕěłńňó, îńîáëčâî ďî÷ŕňęłâö˙ě [1].
Ěĺňîţ đîáîňč ş âč˙âëĺíí˙ íŕéáłëüř ďîďóë˙đíčő ŕëăîđčňěłâ ó áłáëłîňĺęŕő ěîâ ďđîăđŕěóâŕíí˙.
Óńł ŕëăîđčňěč ňŕ ńňđóęňóđč äŕíčő âćĺ äŕâíî đĺŕëłçîâŕíł â áłáëłîňĺęŕő ďîďóë˙đíčő ěîâ ďđîăđŕěóâŕíí˙. Áłëüřĺ íłőňî íĺ ďčřĺ âđó÷íó ŕëăîđčňě ńîđňóâŕíí˙ ÷čńĺë, ŕ ůîá ęîđčńňóâŕňčń˙ őĺř-ňŕáëčö˙ěč, íŕâłňü íĺ ďîňđłáíî çíŕňč, ˙ę âîíč âëŕřňîâŕíł.
Ŕëĺ íŕ˙âíłńňü áĺçëł÷ł ăîňîâčő áłáëłîňĺę íĺ îçíŕ÷ŕş, ůî íĺ ďîňđłáíî đîçóěłňč, ˙ę âëŕřňîâŕíł ŕëăîđčňěč. Ôóíäŕěĺíňŕëüíł çíŕíí˙ äîďîěŕăŕţňü äłçíŕňčń˙, ůî âńĺđĺäčíł, ˙ę âîíî ďđŕöţş ł ÷îěó îäíĺ đłřĺíí˙ ęđŕůĺ, ŕíłć łířĺ ó ęîíęđĺňíłé ńčňóŕöłż. ßęůî çđîçóěłňč, ˙ę âëŕřňîâŕíł ęëŕńč÷íł ŕëăîđčňěč, ňî ěîćíŕ ńňâîđţâŕňč âëŕńíł đłřĺíí˙, ęîěáłíóâŕňč ěĺňîäč îäčí ç îäíčě, ůîá âčđłřóâŕňč áłëüř ńęëŕäíł çŕâäŕíí˙.
Ó ďđîăđŕěóâŕííł ńňŕíäŕđňíŕ áłáëłîňĺęŕ — öĺ áłáëłîňĺęŕ, ůî äîńňóďíŕ â óńłő đĺŕëłçŕöł˙ő äŕíîż ěîâč ďđîăđŕěóâŕíí˙. Çěłńň ňŕęîż áłáëłîňĺęč çŕçâč÷ŕé îďčńŕíî ó ńďĺöčôłęŕöłż ěîâč, îäíŕę ňŕęîć âłí ěîćĺ ÷ŕńňęîâî ŕáî ďîâíłńňţ âčçíŕ÷ŕňčń˙ áłëüř íĺôîđěŕëüíčěč ďđŕęňčęŕěč ďđîăđŕěłńňłâ, ůî ęîđčńňóţňüń˙ íĺţ. Áłëüřłńňü ńňŕíäŕđňíčő áłáëłîňĺę âęëţ÷ŕţňü ó ńĺáĺ âčçíŕ÷ĺíí˙ ďđčíŕéěíł ňŕęčő íŕé÷ŕńňłřĺ âčęîđčńňîâóâŕíčő łíńňđóěĺíňłâ ˙ę:
Ŕëăîđčňěč (ňŕęł ˙ę ŕëăîđčňěč ńîđňóâŕíí˙); 
Ńňđóęňóđč äŕíčő (íŕďđčęëŕä, ńďčńęč, äĺđĺâŕ, őĺř-ňŕáëčöł); 
Âçŕşěîäł˙ ç âłäďîâłäíîţ ďëŕňôîđěîţ (ââĺäĺíí˙-âčâĺäĺíí˙, ńčńňĺěíł âčęëčęč ňŕ łí.). 
Ďîřóę – ďîřčđĺíŕ äł˙, ˙ęŕ âčęîíóşňüń˙ â áłçíĺń-äîäŕňęŕő. Đîçăë˙íĺěî äĺ˙ęł đĺŕëłçŕöłż âłäîěčő ŕëăîđčňěłâ ďîřóęó [2] íŕ Java.
Ëłíłéíčé ŕáî ďîńëłäîâíčé ďîřóę – íŕéďđîńňłřčé ŕëăîđčňě ďîřóęó. Âłí đłäęî âčęîđčńňîâóşňüń˙ ÷ĺđĺç ńâîţ íĺĺôĺęňčâíłńňü. Ďî ńóňł, öĺ ěĺňîä ďîâíîăî ďĺđĺáîđó, ł âłí ďîńňóďŕşňüń˙ łířčě ŕëăîđčňěŕě [3]. Ó ëłíłéíîăî ďîřóęó íĺěŕş ďĺđĺäóěîâ äî ńňŕíó ńňđóęňóđč äŕíčő. Ŕëăîđčňě řóęŕş ĺëĺěĺíň ó çŕäŕíłé ńňđóęňóđł äŕíčő, ďîęč íĺ äîń˙ăíĺ ęłíö˙ ńňđóęňóđč. Ďđč çíŕőîäćĺííł ĺëĺěĺíňŕ ďîâĺđňŕşňüń˙ éîăî ďîçčöł˙ ó ńňđóęňóđł äŕíčő. ßęůî ĺëĺěĺíň íĺ çíŕéäĺíčé, ďîâĺđňŕşěî -1. Ëłíłéíčé ďîřóę ěîćíŕ âčęîđčńňîâóâŕňč äë˙ ěŕëîăî, íĺńîđňîâŕíĺ íŕáîđó äŕíčő, ˙ęčé íĺ çáłëüřóşňüń˙ â đîçěłđŕő.
Đĺŕëłçŕöł˙:
public static int linearSearch(int arr[], int elementToSearch) {
for (int index = 0; index < arr.length; index++) {
if (arr[index] == elementToSearch)
return index;
}
return -1;
}
Äâłéęîâčé ŕáî ëîăŕđčôěł÷íčé ďîřóę ÷ŕńňî âčęîđčńňîâóşňüń˙ ÷ĺđĺç řâčäęčé ÷ŕń ďîřóęó. Öĺé âčä ďîřóęó âčěŕăŕş ďîďĺđĺäíüîăî ńîđňóâŕíí˙ íŕáîđó äŕíčő. Ŕëăîđčňě äłëčňü âőłäíó ęîëĺęöłţ íŕ đłâíł ďîëîâčíč, ł ç ęîćíîţ łňĺđŕöłşţ ďîđłâíţş öłëüîâčé ĺëĺěĺíň ç ĺëĺěĺíňîě ó ńĺđĺäčíł. Ďîřóę çŕęłí÷óşňüń˙ ďđč çíŕőîäćĺííł ĺëĺěĺíňŕ. ˛íŕęřĺ ďđîäîâćóşěî řóęŕňč ĺëĺěĺíň, đîçäłë˙ţ÷č ł âčáčđŕţ÷č âłäďîâłäíčé đîçäłë ěŕńčâó. Öłëüîâčé ĺëĺěĺíň ďîđłâíţşňüń˙ łç ńĺđĺäíłě. Îńü ÷îěó âŕćëčâî ěŕňč âłäńîđňîâŕíó ęîëĺęöłţ ďđč âčęîđčńňŕííł äâłéęîâîăî ďîřóęó [4]. Ďîřóę çŕęłí÷óşňüń˙, ęîëč firstIndex(âęŕçłâíčę) äîń˙ăŕş lastIndex(îńňŕííüîăî ĺëĺěĺíňŕ). Îňćĺ ďĺđĺâłđčâřč âĺńü ěŕńčâ Java íĺ áóëî çíŕéäĺíî ĺëĺěĺíňŕ.
Đĺŕëłçŕöł˙:
public static int binarySearch(int arr[], int elementToSearch) {
int firstIndex = 0;
int lastIndex = arr.length - 1;
// óěîâŕ ďđčďčíĺíí˙(ĺëĺěĺíň íĺ ďđĺäńňŕâëĺíî)
while(firstIndex <= lastIndex) {
int middleIndex = (firstIndex + lastIndex) / 2;
// ˙ęůî ńĺđĺäíłé ĺëĺěĺíň – öłëüîâčé ĺëĺěĺíň, ďîâĺđíóňč éîăî łíäĺęń
if (arr[middleIndex] == elementToSearch) {
return middleIndex;
}
// ˙ęůî ńĺđĺäíłé ĺëĺěĺíň ěĺířĺ
// íŕďđŕâë˙şěî łíäĺęń ó middle+1, çŕáčđŕţ÷č ďĺđřó ÷ŕńňčíó ç
ďĺđĺăë˙íóňîăî
else if (arr[middleIndex] < elementToSearch)
firstIndex = middleIndex + 1;
// ˙ęůî ńĺđĺäíłé ĺëĺěĺíň áłëüřĺ
// íŕďđŕâë˙şěî łíäĺęń ó middle-1, çŕáčđŕţ÷č äđóăó ÷ŕńňčíó ç
ďĺđĺăë˙íóňîăî
else if (arr[middleIndex] > elementToSearch)
lastIndex = middleIndex - 1;
}
return -1;
}
Ďîřóę ńňđčáęŕěč, öĺé ŕëăîđčňě âłä äâłéęîâîăî ďîřóęó âłäđłçí˙şňüń˙ đóőîě âčęëţ÷íî âďĺđĺä. Ňŕęčé ďîřóę âčěŕăŕş âłäńîđňîâŕíîż ęîëĺęöłż. Ńňđčáŕţ÷č âďĺđĺä íŕ łíňĺđâŕë sqrt (arraylength), äîń˙ăŕţ÷č ĺëĺěĺíňŕ áłëüřîăî, íłć ďîňî÷íčé ĺëĺěĺíň ŕáî ęłíö˙ ěŕńčâó. Ďđč ęîćíîěó ńňđčáęó çŕďčńóşňüń˙ ďîďĺđĺäíłé ęđîę. Ńňđčáęč ďđčďčí˙ţňüń˙, ęîëč çíŕéäĺíčé ĺëĺěĺíň áłëüřĺ řóęŕíîăî. Ďîňłě çŕďóńęŕşěî ëłíłéíčé ďîřóę ěłć ďîďĺđĺäíłě ł ďîňî÷íčě ęđîęŕěč. Öĺ çěĺířóş ďîëĺ ďîřóęó ňŕ đîáčňü ëłíłéíčé ďîřóę ćčňňşçäŕňíčě âŕđłŕíňîě [5].
Đĺŕëłçŕöł˙:
public static int jumpSearch(int[] integers, int elementToSearch) {
int arrayLength = integers.length;
int jumpStep = (int) Math.sqrt(integers.length);
int previousStep = 0;
while (integers[Math.min(jumpStep, arrayLength) - 1] < elementToSearch) {
previousStep = jumpStep;
jumpStep += (int)(Math.sqrt(arrayLength));
if (previousStep >= arrayLength;
return -1;
}
while (integers[previousStep] < elementToSearch) {
previousStep++;
if (previousStep == Math.min(jumpStep, arrayLength));
return -1;
}
if (integers[previousStep] == elementToSearch)
return previousStep;
return -1;
}
˛íňĺđďîë˙öłéíčé ďîřóę âčęîđčńňîâóşňüń˙ äë˙ ďîřóęó ĺëĺěĺíňłâ ó âłäńîđňîâŕíîěó ěŕńčâł. Âłí ęîđčńíčé äë˙ đłâíîěłđíî đîçďîäłëĺíčő ó ńňđóęňóđł äŕíčő. Ďđč đłâíîěłđíî đîçďîäłëĺíčő äŕíčő ěłńöĺçíŕőîäćĺíí˙ ĺëĺěĺíňŕ âčçíŕ÷ŕşňüń˙ ňî÷íłřĺ. Ňóň ł đîçęđčâŕşňüń˙ âłäěłíŕ ŕëăîđčňěó âłä áłíŕđíîăî ďîřóęó, äĺ ďîňđłáíî çíŕéňč ĺëĺěĺíň ó ńĺđĺäčíł ěŕńčâó. Äë˙ ďîřóęó ĺëĺěĺíňłâ ó ěŕńčâł ŕëăîđčňě âčęîđčńňîâóş ôîđěóëč łíňĺđďîë˙öłż. Íŕéĺôĺęňčâíłřĺ çŕńňîńîâóâŕňč öł ôîđěóëŕ äë˙ âĺëčęčő ěŕńčâłâ. Â łířîěó âčďŕäęó ŕëăîđčňě ďđŕöţş ˙ę ëłíłéíčé ďîřóę.
Đĺŕëłçŕöł˙:
public static int interpolationSearch(int[] integers, int elementToSearch) {
int startIndex = 0;
int lastIndex = (integers.length - 1);
while ((startIndex <= lastIndex) && (elementToSearch >=
integers[startIndex]) &&
(elementToSearch <= integers[lastIndex])) {
122                                                                                                                                                        // âčęîđčńňîâóşěî ôîđěóëó łíňĺđďîë˙öłż äë˙ ďîřóęó ěîćëčâîż ęđŕůîż
ďîçčöłż äë˙ âłäîěîăî ĺëĺěĺíňŕ
int pos = startIndex + (((lastIndex-startIndex) /
(integers[lastIndex]-integers[startIndex]))*
(elementToSearch - integers[startIndex]));
if (integers[pos] == elementToSearch)
return pos;
if (integers[pos] < elementToSearch)
startIndex = pos + 1;
else
lastIndex = pos - 1;
}
return -1;
}
Ĺęńďîíĺíöłŕëüíčé ďîřóę âčęîđčńňîâóşňüń˙ äë˙ ďîřóęó ĺëĺěĺíňłâ řë˙őîě ďĺđĺőîäó â ĺęńďîíĺíöłŕëüíł ďîçčöłż, ňîáňî ó äđóăó ńňóďłíü. Ó öüîěó ďîřóęó ďîňđłáíî çíŕéňč ďîđłâí˙íî ěĺířčé äłŕďŕçîí ł çŕńňîńîâóâŕňč íŕ íüîěó äâłéęîâčé ŕëăîđčňě äë˙ ďîřóęó ĺëĺěĺíňŕ. Äë˙ đîáîňč ŕëăîđčňěó ęîëĺęöł˙ ďîâčííŕ áóňč âłäńîđňîâŕíŕ. Ĺęńďîíĺíöłŕëüíčé ďîřóę âčęîđčńňîâóşňüń˙ ç âĺëčęčěč ěŕńčâŕěč, ęîëč áłíŕđíčé ďîřóę âčňđŕňíčé. Ňŕęčé ďîřóę đîçäłë˙ş äŕíł íŕ áłëüř äîńňóďíł äë˙ ďîřóęó đîçäłëč.
Đĺŕëłçŕöł˙:
public static int exponentialSearch(int[] integers, int elementToSearch) {
if (integers[0] == elementToSearch)
return 0;
if (integers[integers.length - 1] == elementToSearch)
return integers.length;
int range = 1;
while (range < integers.length && integers[range] <= elementToSearch) {
range = range * 2;
}
return Arrays.binarySearch(integers, range / 2, Math.min(range, integers.length),
elementToSearch);
}
Ňŕęîć, ó ňĺîđłż ŕëăîđčňěłâ ćŕäłáíł ŕëăîđčňěč âłäłăđŕţňü âŕćëčâó đîëü. Âîíč ďđîńňł äë˙ đîçóěłíí˙ ňŕ đĺŕëłçŕöłż, ďđŕöţţňü ďîđłâí˙íî řâčäęî, âłäîěî áŕăŕňî đłçíîěŕíłňíčő çŕäŕ÷, ˙ęł ěîćíŕ âčđłřčňč çŕ äîďîěîăîţ ňŕęčő ŕëăîđčňěłâ [6]. Îäíŕę íĺ çŕâćäč ěîćíŕ äîâĺńňč ěîćëčâłńňü çŕńňîńîâíîńňł ćŕäłáíîăî ŕëăîđčňěó äë˙ çíŕőîäćĺíí˙ ňî÷íîăî âčđłřĺíí˙ áŕăŕňüîő çŕâäŕíü.
Ćŕäłáíčé ŕëăîđčňě – ěĺňîä đîçâ'˙çŕíí˙ îďňčěłçŕöłéíčő çŕäŕ÷, çŕńíîâŕíčé íŕ ňîěó, ůî ďđîöĺń ďđčéí˙ňň˙ đłřĺíí˙ ěîćíŕ đîçáčňč íŕ ĺëĺěĺíňŕđíł ęđîęč, íŕ ęîćíîěó ç ˙ęčő ďđčéěŕşňüń˙ îęđĺěĺ đłřĺíí˙. Đłřĺíí˙, ďđčéí˙ňĺ íŕ ęîćíîěó ęđîöł, ěŕş áóňč îďňčěŕëüíčě ňłëüęč íŕ ďîňî÷íîěó ęđîöł ňŕ ďîâčííĺ ďđčéěŕňčń˙ áĺç âđŕőóâŕíí˙ ďîďĺđĺäíłő ŕáî íŕńňóďíčő đłřĺíü.
Ó ćŕäłáíîěó ŕëăîđčňěł çŕâćäč đîáčňüń˙ âčáłđ, ˙ęčé çäŕşňüń˙ íŕéęđŕůčě ó äŕíčé ěîěĺíň - ňîáňî âčđîáë˙şňüń˙ ëîęŕëüíî îďňčěŕëüíčé âčáłđ ó íŕäłż, ůî âłí ďđčâĺäĺ äî îďňčěŕëüíîăî đłřĺíí˙ ăëîáŕëüíîż çŕäŕ÷ł. Ćŕäłáíł ŕëăîđčňěč íĺ çŕâćäč ďđčâîä˙ňü äî îďňčěŕëüíîăî đłřĺíí˙, ŕëĺ â áŕăŕňüîő çŕâäŕíí˙ő âîíč äŕţňü ďîňđłáíčé đĺçóëüňŕň. Öĺé ŕëăîđčňě âîëîäłş äîńňŕňíüîţ ďîňóćíłńňţ ňŕ äîáđĺ ďłäőîäčňü äë˙ řčđîęîăî ęëŕńó çŕäŕ÷. Ŕëăîđčňěč ďîřóęó ěłíłěŕëüíčő îńňîâčő äĺđĺâ ş ęëŕńč÷íčě ďđčęëŕäîě çŕńňîńóâŕíí˙ ćŕäłáíîż ńňđŕňĺăłż [7].
Îçíŕęč ňîăî, ůî çŕäŕ÷ó ěîćëčâî âčđłřčňč çŕ äîďîěîăîţ ćŕäłáíîăî ŕëăîđčňěó:
çŕäŕ÷ó ěîćíŕ đîçáčňč íŕ ďłäçŕäŕ÷ł; 
âĺëč÷číč, ůî đîçăë˙äŕţňüń˙ â çŕäŕ÷ł, ěîćíŕ äđîáčňč ňŕę ńŕěî íŕ ďłäçŕäŕ÷ł; 
ńóěŕ îďňčěŕëüíčő đłřĺíü äë˙ äâîő ďłäçŕäŕ÷ íŕäŕş îďňčěŕëüíĺ đłřĺíí˙ äë˙ âńłşż çŕäŕ÷ł. 
Đîçăë˙íĺěî ďđîńňčé ďđčęëŕä çŕâäŕíí˙, ůî đîçâ’˙çóşňüń˙ ćŕäłáíčě ŕëăîđčňěîě:
Íŕďđčęëŕä, đîçăë˙íĺěî ďđîáëĺěó âčďëŕňč 98 ęîďłéîę ěîíĺňŕěč íîěłíŕëîě 1, 2, 5, 10 ł 25 ęîďłéîę ňŕę, ůîá çŕăŕëüíŕ ęłëüęłńňü ěîíĺň áóëî ěłíłěŕëüíî.
Đłřĺíí˙: Ćŕäłáíčé ŕëăîđčňě ó öüîěó âčďŕäęó ďîë˙ăŕş â ňîěó, ůîá íŕ ęîćíîěó ęđîöł ďîáóäîâč đłřĺíí˙ âčęîđčńňîâóâŕňč ěîíĺňč ěŕęńčěŕëüíîăî íîěłíŕëó, ł ňčě, ůîá żő áóëî ˙ęîěîăŕ ěĺířĺ (äîń˙ăíĺíí˙ ëîęŕëüíîăî ěłíłěóěó). Äë˙ ďî÷ŕňęó íĺîáőłäíî ňđč ěîíĺňč ďî 25 ęîďłéîę (4 ěîíĺňč äŕţňü áłëüřó ńóěó, íłć ďîňđłáíî). Çŕëčřŕşňüń˙ âčďëŕňčňč 98 – 25*3 = 23 ęîďłéęč.
Íŕ íŕńňóďíîěó ęđîöł ďîňđłáíî îáđŕňč ÷ĺđăîâł íŕéáłëüřł çŕ íîěłíŕëîě ěîíĺňč, ˙ęčěč ěîćíŕ âčäŕňč đĺřňó ńóěč, — äâł ěîíĺňč ďî 10 ęîďłéîę. Äâŕ íŕńňóďíł ęđîęč – öĺ ďî îäíłé ěîíĺňł íîěłíŕëîě 1 ł 2 ęîďłéęč, ňčě ńŕěčě äîçâîë˙ţ÷č âčďëŕňčňč âńţ ńóěó 7 ěîíĺňŕěč.
Âčńíîâęč. Ęîćíŕ ńčńňĺěŕ ěłńňčňü íŕáłđ îáěĺćĺíü ł âčěîă. Ďđŕâčëüíî ďłäłáđŕíčé ŕëăîđčňě ďîřóęó, ůî âđŕőîâóş öł îáěĺćĺíí˙ âłäłăđŕş âčçíŕ÷ŕëüíó đîëü ó ďđîäóęňčâíîńňł ńčńňĺěč. Ŕëăîđčňěč, ďđčçíŕ÷ĺíł äë˙ âčđłřĺíí˙ çŕâäŕíü îďňčěłçŕöłż, çâč÷ŕéíî ˙âë˙ţňü ńîáîţ ďîńëłäîâíłńňü ęđîęłâ, íŕ ęîćíîěó ç ˙ęčő íŕäŕşňüń˙ äĺ˙ęŕ ěíîćčíŕ âčáîđłâ. Âčçíŕ÷ĺíí˙ íŕéęđŕůîăî âčáîđó, ęĺđóţ÷čńü ďđčíöčďŕěč äčíŕěł÷íîăî ďđîăđŕěóâŕíí˙, ó áŕăŕňüîő çŕäŕ÷ŕő îďňčěłçŕöłż íŕăŕäóş ńňđłë˙íčíó ç ăŕđěŕňč ďî ăîđîáö˙ő; łířčěč ńëîâŕěč, äë˙ öčő çŕâäŕíü ęđŕůĺ ďłäőîä˙ňü áłëüř ďđîńňł é ĺôĺęňčâíł ŕëăîđčňěč.
Ňîěó îńíîâíĺ çŕâäŕíí˙ ďđîăđŕěłńňŕ - ŕíŕëłçóâŕňč ł âčđłřóâŕňč ďđîáëĺěč, äĺ ęîä - öĺ âńüîăî ëčřĺ łíńňđóěĺíň äîń˙ăíĺíí˙ ěĺňč. ×ŕńňî âčíčęŕţňü ďđîáëĺěč, ˙ęł âŕćęî âčđłřčňč, ňîäł ďđîăđŕěłńňó ńëłä đîçđîáčňč íîâčé ŕëăîđčňě ŕáî ďîěłđęóâŕňč, ˙ę âčęîđčńňîâóâŕňč łńíóţ÷čé. Ŕäćĺ ˙ęůî çíŕňč ďđî ďđčíöčďč đîáîňč ŕëăîđčňěłâ, ňîäł łńíóş áłëüřŕ éěîâłđíłńňü çíŕéňč ęđŕůĺ đłřĺíí˙. ˛íîäł íŕâłňü íîâó ďđîáëĺěó ěîćíŕ çâĺńňč äî ńňŕđîż, ŕëĺ äë˙ öüîăî ďîňđłáíî âîëîäłňč ôóíäŕěĺíňŕëüíčěč çíŕíí˙ěč.
Ëłňĺđŕňóđŕ
1. Âłęłďĺäł˙ GPGPU [Ĺëĺęňđîííčé đĺńóđń]. Đĺćčě äîńňóďó äî đĺńóđńó: https://uk.wikipedia.org/wiki/GPGPU – Íŕçâŕ ç ĺęđŕíó. Çŕ÷ĺě ďđîăđŕěěčńňó čçó÷ŕňü ŕëăîđčňěű. Tproger [Ĺëĺęňđîííčé đĺńóđń] – Đĺćčě äîńňóďó äî đĺńóđńó: https://tproger.ru/articles/why-learn-algorithms/ 
2. Ŕëăîđčňěč ďîřóęó. UA5.ORG [Ĺëĺęňđîííčé đĺńóđń] – Đĺćčě äîńňóďó äî đĺńóđńó: https://www.ua5.org/osnprog/418-algoritmi-poshuku.html 
3. Íóćíű ëč ďđîăđŕěěčńňó ŕëăîđčňěű č ńňđóęňóđű äŕííűő. Dou [Ĺëĺęňđîííčé đĺńóđń] – Đĺćčě äîńňóďó äî đĺńóđńó: https://dou.ua/lenta/articles/algorithms-and-structures/ 
4. Ďđî ŕëăîđčňěű äë˙ íîâč÷ęîâ. Proglib [Ĺëĺęňđîííčé đĺńóđń] – Đĺćčě äîńňóďó äî đĺńóđńó: https://proglib.io/p/what-is-an-algorithm/ 
5. Ŕëăîđčňěč ł ńňđóęňóđč äŕíčő. Distance Learning [Ĺëĺęňđîííčé đĺńóđń] Đĺćčě äîńňóďó äî đĺńóđńó: https://dl.sumdu.edu.ua/textbooks/95351/522217/index.html 
6. Ŕëăîđčňěű č ńňđóęňóđű äŕííűő â Java. Proselyte [Ĺëĺęňđîííčé đĺńóđń] – Đĺćčě äîńňóďó äî đĺńóđńó: https://proselyte.net/algorithms-and-data- structures-in-java/ 
7. Ćŕäłáíł ŕëăîđčňěč. Distance learning [Ĺëĺęňđîííčé đĺńóđń] – Đĺćčě äîńňóďó äî đĺńóđńó: https://dl.sumdu.edu.ua/textbooks/95351/522264/index.html 

